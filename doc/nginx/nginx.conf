
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
     

  #/data/nginx/cache_item  #本地路径，用来设置Nginx缓存资源的存放地址
  #levels          #默认所有缓存文件都放在同一个/data/nginx/cache下，但是会影响缓存的性能，因此通常会在/data/nginx/cache下面建立子目录用来分别存放不同的文件。假设levels=1:2，Nginx为将要缓存的资源生成的key为f4cd0fbc769e94925ec5540b6a4136d0，那么key的最后一位0，以及倒数第2-3位6d作为两级的子目录，也就是该资源最终会被缓存到/data/nginx/cache/0/6d目录中
  #key_zone        #在共享内存中设置一块存储区域来存放缓存的key和metadata（类似使用次数），这样nginx可以快速判断一个request是否命中或者未命中缓存，1m可以存储8000个key，10m可以存储80000个key
  #max_size        #最大cache空间，如果不指定，会使用掉所有disk space，当达到配额后，会删除最少使用的cache文件
  #inactive        #未被访问文件在缓存中保留时间，本配置中如果60分钟未被访问则不论状态是否为expired，缓存控制程序会删掉文件。inactive默认是10分钟。需要注意的是，inactive和expired配置项的含义是不同的，expired只是缓存过期，但不会被删除，inactive是删除指定时间内未被访问的缓存文件
#use_temp_path   #如果为off，则nginx会将缓存文件直接写入指定的cache文件中，而不是使用temp_path存储，official建议为off，避免文件在不同文件系统中不必要的拷贝
#proxy_cache     #启用proxy cache，并指定key_zone。另外，如果proxy_cache off表示关闭掉缓存。

    proxy_cache_path E:/data/nginx/cache_item levels=1:2 keys_zone=cache_item:500m inactive=30d max_size=10g use_temp_path=off;


    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    upstream backend {
        #ip_hash;
        server 127.0.0.1:8080 weight=5;
        server 127.0.0.1:8081 weight=5;

        #server 127.0.0.1:8082 backup;
    
    }

    upstream backendstatic {
        server 127.0.0.1:8082;
    }


    server {
        listen       80;
        server_name  localhost;


        location / {
            root   html;
            index  index.html index.htm;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        #需要安装第三方ngx_cache_purge 模块
        #清除一定得设置在缓存的前面
        #location ~ /purge(/.*) {
        #    allow              127.0.0.1;
        #    allow              192.168.9.151;
        #    deny               all;
        #    proxy_cache_purge  cache_item $host$uri$is_args$args;
        #}
      


      

        location /image/ {
            root   html;
            index  index.html index.htm;

            #防盗链  只要判断一下 请求头当中的referer 属性是否为 指定域名即可
            valid_referers none *.meng.com; 
            if ($invalid_referer) {
                #rewrite ^/ http://www.meng.com/image/403.png; 
                return 404;
            }

            proxy_cache cache_item;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_cache_key $host$uri$is_args$args;#以全路径md5值做做为Key
            proxy_cache_valid 200 304 12h; #对不同的HTTP状态码设置不同的缓存时间 expires 7d; #总体缓存时间
            proxy_pass http://backendstatic;
        }


        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }
}
